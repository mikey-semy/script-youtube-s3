#!/usr/bin/env python
"""–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å YouTube –≤ S3"""
import os
import sys
import tempfile
import argparse
from pathlib import Path
from typing import Optional

import boto3
from botocore.exceptions import ClientError
from decouple import config
import yt_dlp

def get_s3_client():
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç S3"""
    return boto3.client(
        's3',
        aws_access_key_id=config('AWS_ACCESS_KEY_ID'),
        aws_secret_access_key=config('AWS_SECRET_ACCESS_KEY'),
        region_name=config('AWS_S3_REGION_NAME', default='us-east-1'),
        endpoint_url=config('AWS_S3_ENDPOINT_URL', default=None)
    )

def download_video(url: str, output_path: Path) -> tuple[Optional[Path], Optional[str]]:
    """–°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ —Å YouTube"""
    ydl_opts = {
        'outtmpl': str(output_path / '%(title)s.%(ext)s'),
        'format': 'best[height<=720]',
        'noplaylist': True,
    }
    
    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=False)
            title = info.get('title', 'video')
            
            print(f"üìπ –ù–∞–π–¥–µ–Ω–æ: {title}")
            print(f"üîΩ –°–∫–∞—á–∏–≤–∞–µ–º...")
            
            ydl.download([url])
            
            # –ù–∞–π—Ç–∏ —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
            for file in output_path.glob("*"):
                if file.is_file():
                    print(f"‚úÖ –°–∫–∞—á–∞–Ω–æ: {file.name}")
                    return file, title
            
            return None, None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {e}")
        return None, None

def upload_file_to_s3(file_path: Path, s3_key: str) -> bool:
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –≤ S3"""
    s3_client = get_s3_client()
    bucket = config('AWS_STORAGE_BUCKET_NAME')
    
    try:
        s3_client.head_bucket(Bucket=bucket)
        print(f"‚úÖ –ë–∞–∫–µ—Ç –Ω–∞–π–¥–µ–Ω: {bucket}")
    except ClientError:
        print(f"‚ùå –ë–∞–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {bucket}")
        return False
    
    try:
        size_mb = os.path.getsize(file_path) / (1024*1024)
        print(f"üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º {s3_key} ({size_mb:.1f} –ú–ë)...")
        
        s3_client.upload_file(
            str(file_path),
            bucket,
            s3_key,
            ExtraArgs={'ACL': 'public-read'}
        )
        
        endpoint = config('AWS_S3_ENDPOINT_URL', default=None)
        if endpoint:
            url = f"{endpoint}/{bucket}/{s3_key}"
        else:
            url = f"https://{bucket}.s3.amazonaws.com/{s3_key}"
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {url}")
        return True
        
    except ClientError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        return False

def download():
    """
    –°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ —Å YouTube –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: uv run download "https://youtube.com/watch?v=..."
    """
    if len(sys.argv) < 2:
        print("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: uv run download <youtube_url>")
        sys.exit(1)
    
    url = sys.argv[1]
    
    with tempfile.TemporaryDirectory() as temp_dir:
        temp_path = Path(temp_dir)
        print(f"üöÄ –°–∫–∞—á–∏–≤–∞–µ–º —Å: {url}")
        
        file_path, title = download_video(url, temp_path)
        if file_path:
            print(f"‚úÖ –°–∫–∞—á–∞–Ω–æ –≤: {file_path}")
        else:
            print("‚ùå –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")
            sys.exit(1)

def upload():
    """
    –ó–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –≤ S3
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: uv run upload <–ø—É—Ç—å_–∫_—Ñ–∞–π–ª—É> [--folder –∏–º—è_–ø–∞–ø–∫–∏]
    """
    parser = argparse.ArgumentParser(description='–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –≤ S3')
    parser.add_argument('file_path', help='–ü—É—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Ñ–∞–π–ª—É')
    parser.add_argument('--folder', default='youtube.data', help='–ü–∞–ø–∫–∞ –≤ S3')
    
    args = parser.parse_args()
    
    file_path = Path(args.file_path)
    if not file_path.exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        sys.exit(1)
    
    s3_key = f"{args.folder}/{file_path.name}"
    
    print(f"üöÄ –ó–∞–≥—Ä—É–∂–∞–µ–º: {file_path}")
    success = upload_file_to_s3(file_path, s3_key)
    
    if not success:
        sys.exit(1)

def youtube_to_s3():
    """
    –°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ —Å YouTube –∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤ S3
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: uv run youtube-s3 "https://youtube.com/watch?v=..." [--folder –∏–º—è_–ø–∞–ø–∫–∏]
    """
    parser = argparse.ArgumentParser(description='YouTube –≤ S3')
    parser.add_argument('url', help='URL YouTube')
    parser.add_argument('--folder', default='youtube', help='–ü–∞–ø–∫–∞ –≤ S3')
    
    args = parser.parse_args()
    
    print(f"üöÄ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {args.url}")
    
    with tempfile.TemporaryDirectory() as temp_dir:
        temp_path = Path(temp_dir)
        
        # –°–∫–∞—á–∏–≤–∞–µ–º
        file_path, title = download_video(args.url, temp_path)
        if not file_path:
            print("‚ùå –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")
            sys.exit(1)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º
        s3_key = f"{args.folder}/{file_path.name}"
        success = upload_file_to_s3(file_path, s3_key)
        
        if success:
            print("‚úÖ –ì–æ—Ç–æ–≤–æ!")
        else:
            print("‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å!")
            sys.exit(1)

def list_bucket():
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∞–π–ª—ã –≤ S3 –±–∞–∫–µ—Ç–µ
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: uv run list-bucket [--folder –∏–º—è_–ø–∞–ø–∫–∏]
    """
    parser = argparse.ArgumentParser(description='–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ S3 –±–∞–∫–µ—Ç–∞')
    parser.add_argument('--folder', help='–§–∏–ª—å—Ç—Ä –ø–æ –ø–∞–ø–∫–µ')
    
    args = parser.parse_args()
    
    s3_client = get_s3_client()
    bucket = config('AWS_STORAGE_BUCKET_NAME')
    
    try:
        if args.folder:
            response = s3_client.list_objects_v2(Bucket=bucket, Prefix=f"{args.folder}/")
        else:
            response = s3_client.list_objects_v2(Bucket=bucket)
        
        if 'Contents' in response:
            print(f"üìÅ –§–∞–π–ª—ã –≤ {bucket}:")
            for obj in response['Contents']:
                size_mb = obj['Size'] / (1024*1024)
                print(f"  üìÑ {obj['Key']} ({size_mb:.1f} –ú–ë)")
        else:
            print("üìÅ –ë–∞–∫–µ—Ç –ø—É—Å—Ç")
        
    except ClientError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)

def check_config():
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é AWS
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: uv run check-config
    """
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...")
    
    required_vars = [
        'AWS_ACCESS_KEY_ID',
        'AWS_SECRET_ACCESS_KEY', 
        'AWS_STORAGE_BUCKET_NAME'
    ]
    
    missing = []
    for var in required_vars:
        try:
            value = config(var)
            print(f"‚úÖ {var}: {'*' * (len(value) - 4) + value[-4:]}")
        except:
            missing.append(var)
            print(f"‚ùå {var}: –ù–µ –∑–∞–¥–∞–Ω–æ")
    
    if missing:
        print(f"\n‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing)}")
        print("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏")
        sys.exit(1)
    else:
        print("\n‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤ –ø–æ—Ä—è–¥–∫–µ")
